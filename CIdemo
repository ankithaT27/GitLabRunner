CI/CD is a continuous method of software development, where you continuously build, test, deploy, and monitor iterative code changes
Runners are the agents that run your jobs


Here we are using a project runner, not a shared runner
steps: execute all the steps needed to install runner in gitlab
we can give the tags, the image that we are using here, registration token etc

For this we are using an EC2 instance, with security groups configured and we are opening the necessary ports only (t2.medium)
we are using docker exectors instead of old VM because of security, light weight nature and we can run mutiple jobs in a single VM.

Install docker
Install sonarqube for code scanning and expose port 9000
Now teh GitLab and Sonarqube should be able to talk to ecah other, so generate a token from sonar
Create a .gitlab-ci.yml file, this file contains our script to run the ci-cd pipeline

.gitlab-ci.yml:
Mention the docker image that you want to run as a base image, (eg: if you want to run a java based appln, use an image that already has maven installed on it.
Configure all your secrets in gitlab cicd screts (i.e the varibales section)



*****************************************************************************************************************************************************************************
Identify bottlenecks and common failures
The easiest indicators to check for inefficient pipelines are the runtimes of the jobs, stages, and the total runtime of the pipeline itself. The total pipeline duration is heavily influenced by the:
Size of the repository
Total number of stages and jobs.
Dependencies between jobs.
The “critical path”, which represents the minimum and maximum pipeline duration.
vailability of the runners and the resources they are provisioned with.
Build dependencies and their installation time.
Container image size.
Network latency and slow connections.




Docker as a exector:

Consistent Environment: Docker ensures that the CI/CD pipeline runs in a consistent environment across different machines and operating systems. This consistency helps in avoiding issues related to variations in development environments.

Isolation: Docker containers provide isolation for each CI/CD job, preventing interference between jobs and ensuring that dependencies installed or configurations made during one job do not affect subsequent jobs.

Dependency Management, Reproducibility



