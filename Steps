Trivia: 

Jobs: are something which are nothing but each stage, build, deploy,test etc
these jobs run through gitlab runner configured on linux/windows
tgese runners can directly execeute on linux/ on docker machines installed on linux also
 .gilab-ci.yml
defines scripts that should be run during the CI/CD pipeline and their scheduling, additional configuration files and templates, dependencies, caches, commands GitLab should run sequentially or in parallel, and instructions on where the application should be deployed to.

Fork/clone/push the repo with the source code
write the.gitlab-ci.yml file and commit it
once done the pipeline gets triggered on its own, if a dockerenv is set for it to run, it runs on docker conatiner
Now store any secrets ti push/pull from gitlab repo to dockerhub in variables section
complete the .yml file using different stages

gitlab uses ruby image to create a build


Different types of GitLab executors
shell- simplest - we run commands directly on the OS where runners are installed
docker containers: managed runners are always executed in this



When a pipeline is triggered, the Runner picks up the job, runs the script defined in the .gitlab-ci.yml file and sends the results back to GitLab. The runner can run the job on the same machine where GitLab is installed, or it can run the job on a different machine. This allows the pipeline to be run on a variety of environments, such as different operating systems or different cloud providers.

Once the pipeline is completed, the runner sends the results back to GitLab, which then updates the pipeline status and provides detailed logs of the pipeline execution

GitLab Runner supports multiple types of executors such as shell, Docker, SSH, Kubernetes and more. 



https://www.testpreptraining.com/tutorial/gitlab-ci-cd-specialist-interview-questions/




